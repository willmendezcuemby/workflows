name: ðŸ”„ Versioning & Deployment
on:
  pull_request:
    types: [closed]
env:
  DOCKERHUB_USER: "cuembybot"
  REPO_DEVOPS: "willmendezcuemby/ccp-devops"
  REPO_GITOPS: "willmendezcuemby/gitops-ccp"
  GITOPS_FILE_PATH: "overlays/ccp-pipelines-service/version_info.json"
  ORG_NAME: 'cuemby'
  METADATA_PATH: 'overlays/ccp-pipelines-service/version_info.json'
  DEPLOYMENT_PATCH_PATH: 'overlays/ccp-pipelines-service/dev'
  DISPATCH_COMMIT_MSG: 'Manual Dispatch to test the versioning action'
  DOCKER_FILE_PATH: './Dockerfile'   

jobs:
  if: github.event.pull_request.merged == true
  versioning_job:
    runs-on: ubuntu-latest
    outputs:
      success: ${{ steps.versioning_step.outputs.success }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Get commit message
        id: get_commit_message
        run: |
          commit_message=$(git log -1 --pretty=format:%s)
          echo "Commit message: $commit_message"
          echo "commit_message=$commit_message" >> $GITHUB_ENV
          echo "::set-output name=commit_message::$commit_message"
      - name: Checkout devops repository
        uses: actions/checkout@v3
        with:
          repository: ${{ env.REPO_DEVOPS }}
          token: ${{ secrets.DEVOPS_TOKEN }}
          path: devops_repo
      
      - name: Versioning step
        uses: ./devops_repo/.github/actions/semver-management
        with:
          GH_TOKEN: ${{ secrets.DEVOPS_TOKEN }}
          EXTERNAL_REPO: ${{ env.REPO_GITOPS }}
          EXTERNAL_REPO_FILE_PATH: $envs/ccp-pipelines-service/ccp-${{ github.event.pull_request.base.ref }}/version_info.json
          SOURCE_BRANCH: ${{ github.head_ref }}
          TARGET_BRANCH: ${{ github.base_ref }}
          COMMIT_MESSAGE: ${{ steps.get_commit_message.outputs.commit_message }}

  deploy_job:
    needs: versioning_job
    if: needs.versioning_job.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Checkout devops repository
        uses: actions/checkout@v3
        with:
          repository: ${{ env.REPO_DEVOPS }}
          token: ${{ secrets.DEVOPS_TOKEN }}
          path: devops_repo


      - name: Clone "cuemby/ccp-sdk" submodule
        uses: actions/checkout@v3
        with:
          repository: cuemby/ccp-sdk.git
          ref: "dev"
          token: ${{ secrets.GH_TOKEN }}
          path: ccp-sdk

      - name: Clone "cuemby/by-go-utils" submodule
        uses: actions/checkout@v3
        with:
          repository: cuemby/by-go-utils.git
          ref: "dev-1"
          token: ${{ secrets.GH_TOKEN }}
          path: by-go-utils

      - name: Clone "cuemby/cap-notifications-service" submodule
        uses: actions/checkout@v3
        with:
          repository: cuemby/ccp-notifications-service.git
          ref: "dev"
          token: ${{ secrets.GH_TOKEN }}
          path: ccp-notifications-service

      - name: Clone "cuemby/cap-autoscaling-service" submodule
        uses: actions/checkout@v3
        with:
          repository: cuemby/cap-autoscaling-service.git
          ref: "dev"
          token: ${{ secrets.GH_TOKEN }}
          path: cap-autoscaling-service

      - name: temp modify go.mod
        run: |
          echo "replace github.com/cuemby/ccp-sdk  => ./ccp-sdk" >> go.mod
          echo "replace github.com/cuemby/by-go-utils  => ./by-go-utils" >> go.mod
          echo "replace github.com/cuemby/ccp-notifications-service  => ./ccp-notifications-service" >> go.mod
          echo "replace github.com/cuemby/cap-autoscaling-service  => ./cap-autoscaling-service" >> go.mod

      - name: Deploy to Docker and Update Kustomize
        uses: ./devops_repo/.github/actions/version-upgrade-action
        with:
          gh_token: ${{ secrets.DEVOPS_TOKEN }}
          dockerhub_token: ${{ secrets.DOCKERHUB_TOKEN }}
          dockerhub_username: ${{ env.DOCKERHUB_USER }}
          organization_name: ${{ env.ORG_NAME }}
          external_repo: ${{ env.REPO_GITOPS }}
          metadata_path: envs/ccp-pipelines-service/ccp-${{ github.event.pull_request.base.ref }}/version_info.json
          deployment_overlay_path: ${{ env.DEPLOYMENT_PATCH_PATH }}
          gh_repo_name: ${{ github.event.repository.name }}
          release_branch_docker_alias: ${{ github.event.inputs.targetBranch }}
          dockerfile_path: ${{ env.DOCKER_FILE_PATH }}

    
